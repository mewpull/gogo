/* Lexical part */

// separator  : ',' | ':' ;
terminator : ';' '\n' | ';' | '\n' ;

/* Keywords */
kwdBreak    : 'b' 'r' 'e' 'a' 'k' ;
kwdCase     : 'c' 'a' 's' 'e' ;
kwdConst    : 'c' 'o' 'n' 's' 't' ;
kwdContinue : 'c' 'o' 'n' 't' 'i' 'n' 'u' 'e' ;
kwdDefault  : 'd' 'e' 'f' 'a' 'u' 'l' 't' ;
kwdElse     : 'e' 'l' 's' 'e' ;
kwdFunc     : 'f' 'u' 'n' 'c' ;
kwdFor      : 'f' 'o' 'r' ;
kwdGoto     : 'g' 'o' 't' 'o' ;
kwdIf       : 'i' 'f' ;
kwdImport   : 'i' 'm' 'p' 'o' 'r' 't' ;
kwdPackage  : 'p' 'a' 'c' 'k' 'a' 'g' 'e' ;
kwdRange    : 'r' 'a' 'n' 'g' 'e' ;
kwdRet      : 'r' 'e' 't' 'u' 'r' 'n' ;
kwdStruct   : 's' 't' 'r' 'u' 'c' 't' ;
kwdSwitch   : 's' 'w' 'i' 't' 'c' 'h' ;
kwdType     : 't' 'y' 'p' 'e' ;
kwdVar      : 'v' 'a' 'r' ;

/* Types */
type : 'b' 'o' 'o' 'l'
     | 'i' 'n' 't' | 'f' 'l' 'o' 'a' 't' '3' '2' | 'f' 'l' 'o' 'a' 't' '6' '4'
     | 'b' 'y' 't' 'e'
     | 's' 't' 'r' 'i' 'n' 'g'
     ;

/* Predeclared contants */
boolLit : 't' 'r' 'u' 'e' | 'f' 'a' 'l' 's' 'e' ;

/* Operators */
_relOp      : '=' '=' | '!' '=' | '<' | '<' '=' | '>' | '>' '=' ;
_addOp      : '+' | '-' | '|' | '^' ;
_mulOp      : '*' | '/' | '%' | '<' '<' | '>' '>' | '&' | '&' '^' ;
assignOp    : [ _addOp | _mulOp ] '=' ;
shortAssign : ':' '=' ;
// dotOp       : '.' ;

/* Whitespaces (suppressed) */
!whitespace : ' ' | '\t' | '\r' ;

/* Comments (suppressed) */
!comment      : _lineComment | _blockComment ;
_lineComment  : '/' '/' { . } '\n' ;
_blockComment : '/' '*' { . | '*' } '*' '/' ;

/* Letters and digits */
_letter        : _unicodeLetter | '_' ;
_unicodeLetter : 'a' - 'z' | 'A' - 'Z' ;
_decimalDigit  : '0' - '9' ;
_octalDigit    : '0' - '7' ;
_hexDigit      : _decimalDigit | 'a' - 'f' | 'A' - 'F' ;

/* Identifiers */
// TODO: Check this
// blankIdent : '_' ;
identifier : _letter { _letter | _decimalDigit } ;

/* Integer literals */
intLit      : _decimalLit | _octalLit | _hexLit ;
_decimalLit : '1' - '9' { _decimalDigit } ;
_octalLit   : '0' { _octalDigit } ;
_hexLit     : '0' ( 'x' | 'X' ) _hexDigit { _hexDigit } ;

/* Floating-point literals */
floatLit  : _decimals '.' [ _decimals ] [ _exponent ]
          | _decimals _exponent
          | '.' _decimals [ _exponent ]
          ;
_decimals : _decimalDigit { _decimalDigit } ;
_exponent : ( 'e' | 'E' ) [ '+' | '-' ] _decimals ;

/* String literals */
stringLit          :  _rawStrLit | _interpretedStrLit ;
_rawStrLit         : '`' { . } '`' ;
_interpretedStrLit : '"' { . | '\\' '"' | _escapeChar } '"' ;
/* Single-character escapes */
_escapeChar : '\\' 'n' | '\\' 'r' | '\\' 't' ;

/* Rune literals */
runeLit  : '\'' [ '\\' ] [ . ] '\'' ;

/* Syntax part */

<<
import(
        "errors"
        "fmt"
        "regexp"
        "strconv"
        "strings"

        "github.com/shivansh/gogo/src/ast"
        "github.com/shivansh/gogo/src/utils"
        "github.com/shivansh/gogo/tmp/token"
)

type symTabType map[string][]string

type SymInfo struct {
	varSymTab symTabType
	parent    *SymInfo
}

// DeferStackItem is an individual item stored when a call to defer is made. It
// contains the code for the corresponding function call which is placed at the
// end of function body.
type DeferStackItem []string

var (
	tmpIndex   int
	labelIndex int
	varIndex   int
	// funcSymtabCreated keeps track whether a symbol table corresponding to a
	// function declaration has to be instantiated. This is because usually
	// a new symbol table is created when the corresponding block begins.
	// However, in case of functions the arguments also need to be added to
	// the symbol table. Thus the symbol table is instantiated when the
	// production rule corresponding to the arguments is reached and not
	// when the block begins.
	funcSymtabCreated bool
	forSymtabCreated bool
	symTab            symTabType // symbol table for temporaries ; TODO: Update this.
	// currSymTab keeps track of the currently active symbol table
	// depending on scope.
	currSymTab *SymInfo
	// globalSymTab keeps track of the global struct and function declarations.
	// NOTE: structs and functions can only be declared globally.
	globalSymTab symTabType
	// deferStack stores the deferred function calls which are then called
	// when the surrounding function block ends.
	deferStack *utils.Stack
	re         *regexp.Regexp
)

func init() {
	symTab = make(symTabType)
	globalSymTab = make(symTabType)
	// currSymTab now allocates space for a global symbol table for variable
	// declarations. Ideally, instead of creating a new symbol table it
	// should've been global symbol table, but since the type of
	// currSymTab.varSymTab is not pointer, updates made elsewhere will not
	// be reflected globally.
	// TODO: Update type of currSymTab.varSymTab to a pointer.
	currSymTab = &SymInfo{make(symTabType), nil}
	deferStack = utils.CreateStack()
	re = regexp.MustCompile("(^-?[0-9]+$)") // integers
}

// SearchInScope returns the symbol table entry for a given variable in the
// current scope. If not found, the parent symbol table is looked up until the
// topmost symbol table is reached. If not found in all these symbol tables,
// then the global symbol table is looked up which contains the entries
// corresponding to structs and functions.
func SearchInScope(v string) ([]string, bool) {
	currScope := currSymTab
	for currScope != nil {
		symTabEntry, ok := currScope.varSymTab[v]
		if ok {
			return symTabEntry, true
		} else {
			currScope = currScope.parent
		}
	}
	// Lookup in global scope in case the variable corresponds to a struct
	// or a function name.
	for k, symTabEntry := range globalSymTab {
		if k == v {
			return symTabEntry, true
		}
	}
	return []string{}, false
}

// GetRealName extracts the original name of variable from its renamed version.
func GetRealName(s string) string {
	realName := ""
	for i := 0; i < len(s); i++ {
		if s[i] == '.' {
			break
		} else {
			realName = realName + string(s[i])
		}
	}
	return realName
}

// NewTmp generates a unique temporary variable.
func NewTmp() string {
	t := fmt.Sprintf("t%d", tmpIndex)
	tmpIndex++
	return t
}

// NewLabel generates a unique label name.
func NewLabel() string {
	l := fmt.Sprintf("l%d", labelIndex)
	labelIndex++
	return l
}

// NewVar generates a unique variable name used for renaming. A variable named
// var will be renamed to 'var.int_lit' where int_lit is an integer. Since
// variable names cannot contain a '.', this will not result in a naming
// conflict with an existing variable. The renamed variable will only occur in
// the IR (there is no constraint on variable names in IR as of now).
func RenameVariable(v string) string {
	ret := fmt.Sprintf("%s.%d", v, varIndex)
	varIndex++
	return ret
}
>>

// NOTE: https://github.com/goccmack/gocc/issues/5998

// SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
Start
        : SourceFile   << ast.PrintIR($0) >>
        ;

// SourceFile : PackageClause terminator RepeatTerminator RepeatImportDecl RepeatTopLevelDecl
SourceFile : RepeatTopLevelDecl
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
           ;

// RepeatImportDecl : ImportDecl terminator RepeatTerminator RepeatImportDecl
//                         << func() (Attrib, error) {
//                                 n := ast.Node{"", []string{}}
//                                 n.Code = append(n.Code, $0.(ast.Node).Code...)
//                                 n.Code = append(n.Code, $3.(ast.Node).Code...)
//                                 n.Code = append(n.Code, "\n")
//                                 return nil, nil
//                         } () >>
//                  | empty
//                         << func() (Attrib, error) {
//                                 n := ast.Node{"", []string{}}
//                                 return n, nil
//                         } () >>
//                  ;
//
// // ImportDecl       = "import" ( ImportSpec | "(" { ImportSpec ";" } ")" ) .
// // ImportSpec       = [ "." | PackageName ] ImportPath .
// // ImportPath       = string_lit .
// ImportDecl : kwdImport ImportSpec
//                 << func() (Attrib, error) {
//                         fmt.Println("kwdImport ImportSpec");
//                         return nil, nil
//                 } () >>
//            | kwdImport "(" RepeatImportSpec ")"
//                 << func() (Attrib, error) {
//                         fmt.Println("kwdImport \"(\" RepeatImportSpec \")\"");
//                         return nil, nil
//                 } () >>
//            ;
//
// RepeatImportSpec : ImportSpec terminator RepeatImportSpec
//                 << func() (Attrib, error) {
//                         fmt.Println("ImportSpec terminator RepeatImportSpec");
//                         return nil, nil
//                 } () >>
//                  | empty
//                 << func() (Attrib, error) {
//                         fmt.Println("empty");
//                         return nil, nil
//                 } () >>
//                 // TODO: '\n' can follow "import (", but a ';' cannot as opposed to go's grammar.
//                  | terminator RepeatImportSpec
//                 << func() (Attrib, error) {
//                         fmt.Println("terminator RepeatImportSpec");
//                         return nil, nil
//                 } () >>
//                  ;
//
// ImportSpec : ImportPath
//                 << func() (Attrib, error) {
//                         fmt.Println("ImportPath");
//                         return nil, nil
//                 } () >>
//            | "." ImportPath
//                 << func() (Attrib, error) {
//                         fmt.Println("\".\" ImportPath");
//                         return nil, nil
//                 } () >>
//            | PackageName ImportPath
//                 << func() (Attrib, error) {
//                         fmt.Println("PackageName ImportPath");
//                         return nil, nil
//                 } () >>
//            ;
//
// ImportPath : stringLit
//                 << func() (Attrib, error) {
//                       fmt.Println("stringLit");
//                       return nil, nil
//                 } () >>
//            ;
//
// PackageClause : kwdPackage PackageName
//                 << func() (Attrib, error) {
//                         fmt.Println("kwdPackage PackageName");
//                         return nil, nil
//                 } () >>
//               ;
//
// PackageName : identifier
//                 << func() (Attrib, error) {
//                         fmt.Println("identifier");
//                         return nil, nil
//                 } () >>
//             ;

// TODO: MethodDecl is not supported at the moment.
// TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
RepeatTopLevelDecl
        : TopLevelDecl RepeatTopLevelDecl
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $1.(ast.Node).Code...)
                        return n, nil
                } () >>
        | empty
                << func() (Attrib, error) {
                        return ast.Node{"", []string{}}, nil
                } () >>
        ;

TopLevelDecl
        : Declaration RepeatTerminator
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
        | FunctionDecl RepeatTerminator
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
        ;

// Declaration = ConstDecl | TypeDecl | VarDecl .
Declaration
        : ConstDecl
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
        | TypeDecl
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
        | VarDecl
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
        ;

// VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
// VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
VarDecl
        : kwdVar VarSpec
                << func() (Attrib, error) {
                        return ast.Node{"", $1.(ast.Node).Code}, nil
                } () >>
//         | kwdVar "(" RepeatTerminator RepeatVarSpec ")"
//             << func() (Attrib, error) {
//                   fmt.Println("kwdVar \"(\" RepeatTerminator RepeatVarSpec \")\"");
//                   return nil, nil
//             } () >>
        ;

VarSpec
        : IdentifierList Type                     << ast.NewVarSpec(0, $0, $1) >>
        | IdentifierList Type "=" ExpressionList  << ast.NewVarSpec(1, $0, $1, $3) >>
        | IdentifierList "=" ExpressionList       << ast.NewVarSpec(2, $0, $2) >>
        | empty                                   << ast.NewVarSpec(3) >>
        ;

// TypeDecl  = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
// TypeSpec  = AliasDecl | TypeDef .
// AliasDecl = identifier "=" Type
// TypeDef   = identifier Type
TypeDecl : kwdType TypeSpec   << ast.NewTypeDecl($0, $1) >>
//          | kwdType "(" RepeatTerminator RepeatTypeSpec ")"
         ;
//
// RepeatTypeSpec : TypeSpec terminator RepeatTerminator RepeatTypeSpec
//                     << func() (Attrib, error) {
//                             fmt.Println("TypeSpec terminator RepeatTerminator RepeatTypeSpec");
//                             return nil, nil
//                     } () >>
//                | TypeSpec RepeatTerminator
//                     << func() (Attrib, error) {
//                             fmt.Println("TypeSpec RepeatTerminator");
//                             return nil, nil
//                     } () >>
//                ;
//
TypeSpec : TypeDef
            << func() (Attrib, error) {
                return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
            } () >>
//          |    AliasDecl
//             << func() (Attrib, error) {
//                     fmt.Println("AliasDecl");
//                     return nil, nil
//             } () >>
//          | empty
//             << func() (Attrib, error) {
//                     fmt.Println("empty");
//                     return nil, nil
//             } () >>
         ;
//
// AliasDecl : identifier "=" Type
//             << func() (Attrib, error) {
//                     fmt.Println("identifier \"=\" Type");
//                     return nil, nil
//             } () >>
//           ;

TypeDef : identifier Type
             << func() (Attrib, error) {
                    return ast.Node{fmt.Sprintf("%s, %s", $1.(ast.Node).Place, string($0.(*token.Token).Lit)), $1.(ast.Node).Code}, nil
             } () >>
        ;

// ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
// ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
// IdentifierList = identifier { "," identifier } .
// ExpressionList = Expression { "," Expression } .
ConstDecl : kwdConst ConstSpec
                << func() (Attrib, error) {
                        return ast.Node{"", $1.(ast.Node).Code}, nil
                } () >>
          // | kwdConst "(" RepeatTerminator RepeatConstSpec ")"
          //   << func() (Attrib, error) {
          //           fmt.Println("kwdConst \"(\" RepeatTerminator RepeatConstSpec \")\"");
          //           return nil, nil
          //   } () >>
          ;

// RepeatConstSpec : ConstSpec terminator RepeatTerminator RepeatConstSpec
//                 << func() (Attrib, error) {
//                       fmt.Println("ConstSpec terminator RepeatTerminator RepeatConstSpec");
//                       return nil, nil
//                 } () >>
//                 | ConstSpec RepeatTerminator
//                 << func() (Attrib, error) {
//                       fmt.Println("ConstSpec RepeatTerminator");
//                       return nil, nil
//                 } () >>
//                 ;

ConstSpec : IdentifierList                     << ast.NewConstSpec(0, $0) >>
          | IdentifierList "=" ExpressionList  << ast.NewConstSpec(1, $0, $2) >>
          // | IdentifierList Type "=" ExpressionList
          //       << func() (Attrib, error) {
          //               fmt.Println("IdentifierList Type \"=\" ExpressionList");
          //               return nil, nil
          //       } () >>
          // | empty
          //       << func() (Attrib, error) {
          //               fmt.Println("empty");
          //               return nil, nil
          //       } () >>
          ;

ExpressionList : Expression
                        << func() (Attrib, error) {
                                return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                        } () >>
               | Expression "," ExpressionList
                        << func() (Attrib, error) {
                                n := ast.Node{"", $0.(ast.Node).Code}
                                n.Code = append(n.Code, $2.(ast.Node).Code...)
                                n.Place = fmt.Sprintf("%s,%s", $0.(ast.Node).Place, $2.(ast.Node).Place)
                                return n, nil
                        } () >>
               ;

// Expression = UnaryExpr | Expression binary_op Expression .
// NOTE: The original BNF corresponding to Expression is modified to take into
// account operator precedence. The operators used are in the order of
// increasing precedence starting from top.
Expression : Expression "||" Term1
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        trueLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Place = NewTmp()
                        n.Code = append(n.Code, fmt.Sprintf("beq, %s, %s, 1", trueLabel, $0.(ast.Node).Place))
                        n.Code = append(n.Code, fmt.Sprintf("beq, %s, %s, 1", trueLabel, $2.(ast.Node).Place))
                        n.Code = append(n.Code, fmt.Sprintf("=, %s, 0", n.Place))
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", trueLabel))
                        n.Code = append(n.Code, fmt.Sprintf("=, %s, 1", n.Place))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
           | Term1
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
           ;

Term1 : Term1 "&&" Term2
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        falseLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Place = NewTmp()
                        n.Code = append(n.Code, fmt.Sprintf("beq, %s, %s, 0", falseLabel, $0.(ast.Node).Place))
                        n.Code = append(n.Code, fmt.Sprintf("beq, %s, %s, 0", falseLabel, $2.(ast.Node).Place))
                        n.Code = append(n.Code, fmt.Sprintf("=, %s, 1", n.Place))
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", falseLabel))
                        n.Code = append(n.Code, fmt.Sprintf("=, %s, 0", n.Place))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
        | Term2
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
        ;

Term2 : Term2 RelOp Term3
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Place = NewTmp()
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        branchOp := ""
                        falseLabel := NewLabel()
                        afterLabel := NewLabel()
                        switch $1.(ast.Node).Place {
                                case "==":
                                        branchOp = "bne"
                                case "!=":
                                        branchOp = "beq"
                                case "<=":
                                        branchOp = "bgt"
                                case "<":
                                        branchOp = "bge"
                                case ">=":
                                        branchOp = "blt"
                                case ">":
                                        branchOp = "ble"
                        }
                        n.Code = append(n.Code, fmt.Sprintf("%s, %s, %s, %s", branchOp, falseLabel, $0.(ast.Node).Place, $2.(ast.Node).Place))
                        n.Code = append(n.Code, fmt.Sprintf("=, %s, 1", n.Place))
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", falseLabel))
                        n.Code = append(n.Code, fmt.Sprintf("=, %s, 0", n.Place))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
        | Term3
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
        ;

Term3 : Term3 "+" Term4
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        if re.MatchString($0.(ast.Node).Place) && re.MatchString($2.(ast.Node).Place) {
                                // expression is of the form 1+2
                                term3val, err := strconv.Atoi($0.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                term4val, err := strconv.Atoi($2.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                n.Place = strconv.Itoa(term3val + term4val)
                        } else if re.MatchString($0.(ast.Node).Place) {
                                // expression is of the form 1+b, which is to be converted to b+1
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("+, %s, %s, %s", n.Place, $2.(ast.Node).Place, $0.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        } else {
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("+, %s, %s, %s", n.Place, $0.(ast.Node).Place, $2.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        }
                        return n, nil
                } () >>
        | Term4
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
        ;

Term4 : Term4 "-" Term5
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        if re.MatchString($0.(ast.Node).Place) && re.MatchString($2.(ast.Node).Place) {
                                // expression is of the form 1+2
                                term3val, err := strconv.Atoi($0.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                term4val, err := strconv.Atoi($2.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                n.Place = strconv.Itoa(term3val - term4val)
                        } else if re.MatchString($0.(ast.Node).Place) {
                                // expression is of the form 1+b, which is to be converted to b+1
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("-, %s, %s, %s", n.Place, $2.(ast.Node).Place, $0.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        } else {
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("-, %s, %s, %s", n.Place, $0.(ast.Node).Place, $2.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        }
                        return n, nil
                } () >>
      | Term5
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
      ;

Term5 : Term5 "*" Term6
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        if re.MatchString($0.(ast.Node).Place) && re.MatchString($2.(ast.Node).Place) {
                                // expression is of the form 1+2
                                term3val, err := strconv.Atoi($0.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                term4val, err := strconv.Atoi($2.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                n.Place = strconv.Itoa(term3val * term4val)
                        } else if re.MatchString($0.(ast.Node).Place) {
                                // expression is of the form 1+b, which is to be converted to b+1
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("*, %s, %s, %s", n.Place, $2.(ast.Node).Place, $0.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        } else {
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("*, %s, %s, %s", n.Place, $0.(ast.Node).Place, $2.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        }
                        return n, nil
                } () >>
      | Term6
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
      ;

Term6 : Term6 "/" Term7
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        if re.MatchString($0.(ast.Node).Place) && re.MatchString($2.(ast.Node).Place) {
                                // expression is of the form 1+2
                                term3val, err := strconv.Atoi($0.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                term4val, err := strconv.Atoi($2.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                n.Place = strconv.Itoa(term3val / term4val)
                        } else if re.MatchString($0.(ast.Node).Place) {
                                // expression is of the form 1+b, which is to be converted to b+1
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("/, %s, %s, %s", n.Place, $2.(ast.Node).Place, $0.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        } else {
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("/, %s, %s, %s", n.Place, $0.(ast.Node).Place, $2.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        }
                        return n, nil
                } () >>
      | Term7
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
      ;

Term7 : Term7 "%" Term8
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        if re.MatchString($0.(ast.Node).Place) && re.MatchString($2.(ast.Node).Place) {
                                // expression is of the form 1+2
                                term3val, err := strconv.Atoi($0.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                term4val, err := strconv.Atoi($2.(ast.Node).Place)
                                if err != nil {
                                        return nil, err
                                }
                                n.Place = strconv.Itoa(term3val % term4val)
                        } else if re.MatchString($0.(ast.Node).Place) {
                                // expression is of the form 1+b, which is to be converted to b+1
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("rem, %s, %s, %s", n.Place, $2.(ast.Node).Place, $0.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        } else {
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("rem, %s, %s, %s", n.Place, $0.(ast.Node).Place, $2.(ast.Node).Place))
                                n.Code = append(n.Code, "\n")
                        }
                        return n, nil
                } () >>
      | Term8
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
      ;

Term8 : "(" Expression ")"
                << func() (Attrib, error) {
                        return ast.Node{$1.(ast.Node).Place, $1.(ast.Node).Code}, nil
                } () >>
      | UnaryExpr
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
      ;

// TODO: Add support for booleans in IR.
BinaryOp : RelOp
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, []string{}}, nil
                } () >>
         | "||"
                << func() (Attrib, error) {
                        return ast.Node{"or", []string{}}, nil
                } () >>
         | "&&"
                << func() (Attrib, error) {
                        return ast.Node{"and", []string{}}, nil
                } () >>
         ;

// unaryOp will be used for defining UnaryExpr in parser.
// unaryOp     : '+' | '-' | '!' | '^' | '*' | '&' | '<' '-' ;
// binaryOp    : '|' '|' | '&' '&' | _relOp | _addOp | _mulOp ;
RelOp : "=="
        << func() (Attrib, error) {
                return ast.Node{"==", []string{}}, nil
        } () >>
      | "!="
        << func() (Attrib, error) {
                return ast.Node{"!=", []string{}}, nil
        } () >>
      | "<="
        << func() (Attrib, error) {
                return ast.Node{"<=", []string{}}, nil
        } () >>
      | "<"
        << func() (Attrib, error) {
                return ast.Node{"<", []string{}}, nil
        } () >>
      | ">="
        << func() (Attrib, error) {
                return ast.Node{">=", []string{}}, nil
        } () >>
      | ">"
        << func() (Attrib, error) {
                return ast.Node{">", []string{}}, nil
        } () >>
      ;

// UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .
UnaryExpr : PrimaryExpr
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
          | UnaryOp UnaryExpr
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        n.Code = append(n.Code, $1.(ast.Node).Code...)
                        switch $0.(ast.Node).Place {
                        case "-":
                                if re.MatchString($1.(ast.Node).Place) {
                                        // expression is of the form 1+2
                                        term3val, err := strconv.Atoi($1.(ast.Node).Place)
                                        if err != nil {
                                                return nil, err
                                        }
                                        n.Place = strconv.Itoa(term3val * -1)
                                } else {
                                        n.Place = NewTmp()
                                        n.Code = append(n.Code, fmt.Sprintf("*, %s, %s, -1", n.Place, $1.(ast.Node).Place))
                                }
                        case "!":
                                n.Place = NewTmp()
                                n.Code = append(n.Code, fmt.Sprintf("not, %s, %s", n.Place, $1.(ast.Node).Place))
                        case "+":
                                n.Place = $1.(ast.Node).Place
                        case "&":
                                // Place of any pointer variable starts with "pointer:" and then followed by string returned by NewTmp()
                                n.Place = "pointer:" + $1.(ast.Node).Place
                        case "*":
                                n.Place = "deref:" + $1.(ast.Node).Place
                        default:
                                return n, errors.New(fmt.Sprintf("%s operator not supported", $0.(ast.Node).Place))
                        }
                        return n, nil
                } () >>
          ;

UnaryOp : "+"
              << func() (Attrib, error) {
                    return ast.Node{"+", []string{}}, nil
              } () >>
        | "-"
              << func() (Attrib, error) {
                    return ast.Node{"-", []string{}}, nil
              } () >>
        | "!"
              << func() (Attrib, error) {
                    return ast.Node{"!", []string{}}, nil
              } () >>
//         | "^"
//               << func() (Attrib, error) {
//                     fmt.Println("\"^\"");
//                     return nil, nil
//               } () >>
       | "*"
             << func() (Attrib, error) {
                   return ast.Node{"*", []string{}}, nil
             } () >>
       | "&"
             << func() (Attrib, error) {
                   return ast.Node{"&", []string{}}, nil
             } () >>
//         | "<-"
//               << func() (Attrib, error) {
//                     fmt.Println("\"<-\"");
//                     return nil, nil
//               } () >>
        ;

// PrimaryExpr =
//  Operand |
//  Conversion |
//  MethodExpr |
//  PrimaryExpr Selector |
//  PrimaryExpr Index |
//  PrimaryExpr Slice |
//  PrimaryExpr TypeAssertion |
//  PrimaryExpr Arguments .
PrimaryExpr : Operand
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
//             | Conversion
//                 << func() (Attrib, error) {
//                       fmt.Println("Conversion");
//                       return nil, nil
//                 } () >>
            | PrimaryExpr Selector
                    << func() (Attrib, error) {
                          varName := fmt.Sprintf("%s.%s", $0.(ast.Node).Place, $1.(ast.Node).Place)
                          symTabEntry, found := SearchInScope(varName)
                          if found {
                                if _, ok := globalSymTab[varName]; ok {
                                            return nil, errors.New(fmt.Sprintf("%s not in scope", varName) )
                                   } else {
                                            return ast.Node{symTabEntry[0], []string{}}, nil
                                   }
                          } else {
                                 return nil, errors.New(fmt.Sprintf("%s not in scope", varName) )
                          }
                    } () >>

            | PrimaryExpr Index
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        n.Place = NewTmp()
                        // TODO: Write comment here.
                        symTab[n.Place] = []string{fmt.Sprintf("%s, %s", $0.(ast.Node).Place, $1.(ast.Node).Place), "array"}
                        n.Code = append(n.Code, $1.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("from, %s, %s, %s", n.Place, $0.(ast.Node).Place, $1.(ast.Node).Place))
                        return n, nil
                } () >>
//             | PrimaryExpr Slice
//                 << func() (Attrib, error) {
//                       fmt.Println("PrimaryExpr Slice");
//                       return nil, nil
//                 } () >>
//             | PrimaryExpr TypeAssertion
//                 << func() (Attrib, error) {
//                       fmt.Println("PrimaryExpr TypeAssertion");
//                       return nil, nil
//                 } () >>
            | PrimaryExpr Arguments
                // This is the production rule for a function call.
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        typeName := globalSymTab[$0.(ast.Node).Place][0]
                        var returnLength int
                        if len(typeName) >= 5 && typeName[:4] == "func" {
                                returnLength, _ = strconv.Atoi(typeName[5:])
                        } else {
                                return nil, errors.New(fmt.Sprintf("%s not a function", $0.(ast.Node).Place))
                        }
                        argExpr := utils.SplitAndSanitize($1.(ast.Node).Place, ",")
                        for k, v := range argExpr {
                              n.Code = append(n.Code, fmt.Sprintf("=, %s.%d, %s", $0.(ast.Node).Place, k, v))
                        }
                        n.Code = append(n.Code, fmt.Sprintf("call, %s", $0.(ast.Node).Place))
                        for k:=0 ; k < returnLength ; k++ {
                                n.Place = fmt.Sprintf("%s, return.%d", n.Place, k)
                        }

                        // n.Code = append(n.Code, fmt.Sprintf("store, %s", n.Place))
                        n.Code = append(n.Code, "\n")
                        return n, nil
                } () >>
            ;

// Operand     = Literal | OperandName | "(" Expression ")" .
// Literal     = BasicLit | CompositeLit | FunctionLit .
// BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
// OperandName = identifier | QualifiedIdent.
Operand : Literal
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
        | OperandName
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, []string{}}, nil
                } () >>
//         | "(" Expression ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Expression \")\"");
//                       return nil, nil
//                 } () >>
        ;

Literal : BasicLit
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, []string{}}, nil
                } () >>
        | CompositeLit
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
//         | FunctionLit
//                 << func() (Attrib, error) {
//                       fmt.Println("FunctionLit");
//                       return nil, nil
//                 } () >>
        ;

BasicLit : intLit
                << func() (Attrib, error) {
                        return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
                } () >>
//          | floatLit
//                 << func() (Attrib, error) {
//                       fmt.Println("floatLit");
//                       return nil, nil
//                 } () >>
//          | runeLit
//                 << func() (Attrib, error) {
//                       fmt.Println("runeLit");
//                       return nil, nil
//                 } () >>
         | stringLit
                << func() (Attrib, error) {
                        return ast.Node{fmt.Sprintf("string:%s", string($0.(*token.Token).Lit)), []string{}}, nil
                } () >>
//          | boolLit
//                << func() (Attrib, error) {
//                      fmt.Println("boolLit");
//                      return nil, nil
//                } () >>
         ;

// CompositeLit  = LiteralType LiteralValue .
// LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
//                 SliceType | MapType | TypeName .
// LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
// ElementList   = KeyedElement { "," KeyedElement } .
// KeyedElement  = [ Key ":" ] Element .
// Key           = FieldName | Expression | LiteralValue .
// FieldName     = identifier .
// Element       = Expression | LiteralValue .
CompositeLit : LiteralType LiteralValue
                        << func() (Attrib, error) {
                                // NOTE: Structs don't support initialization of members
                                // currently. All data members are initialized to default
                                // values when a struct instance is defined.
                                n := ast.Node{$0.(ast.Node).Place, []string{}}
                                // Check if the LiteralType corresponds to ArrayType.
                                // This is done because unlike structs it is not required
                                // to add a symbol table entry for place value of arrays
                                // (which is of the form "array:<length_of_array>"), thus
                                // returning early.
                                typeName := $0.(ast.Node).Place
                                if len(typeName) >= 5 && typeName[:5] == "array" {
                                        return n, nil
                                }
                                // In case the corresponds to a struct, add the
                                // code for its data member initialization.
                                symTabEntry, found := SearchInScope($0.(ast.Node).Place)
                                if found {
                                        switch symTabEntry[0] {
                                        case "struct":
                                                // The place value for struct is of the form -
                                                //      struct:<number of members of struct>:<name of struct>
                                                n.Place = fmt.Sprintf("struct:%d:%s", (len(symTabEntry)-1) / 2, n.Place)
                                                litVals := utils.SplitAndSanitize($1.(ast.Node).Place, ",")
                                                litValCodes := $1.(ast.Node).Code
                                                structInit := []string{}
                                                // In case of integral (or any type) initializations, the corresponding
                                                // lexeme is placed at the place value, justifying the length check which
                                                // is made on 'litVals' instead of 'litValCodes'. If there are no place
                                                // values for the data members, then initialize all to their default
                                                // values. Otherwise initialize them to the corresponding place value.
                                                if len(litVals) == 0 {
                                                        for k, v := range symTabEntry[1:] {
                                                                if k % 2 == 0 {
                                                                        structInit = append(structInit, v)
                                                                        // TODO: Update default values depending on type
                                                                        structInit = append(structInit, "0")
                                                                }
                                                        }
                                                } else {
                                                        for k, v := range symTabEntry[1:] {
                                                                if k % 2 == 0 {
                                                                        structInit = append(structInit, v)
                                                                        structInit = append(structInit, litVals[k / 2])
                                                                }
                                                        }
                                                }
                                                // When these code values will be utilized above, the litValCodes will be
                                                // placed above the code corresponding to structInit (litVals can be expressions).
                                                n.Code = append(n.Code, structInit...)
                                                n.Code = append(n.Code, litValCodes...)
                                        }
                                } else {
                                        // TODO: Update error message.
                                        return nil, errors.New(fmt.Sprintf("%s not in scope", $0.(ast.Node).Place))
                                }
                                return n, nil
                        } () >>
             ;

LiteralType : ArrayType
                        << func() (Attrib, error) {
                                return ast.Node{$0.(ast.Node).Place, []string{}}, nil
                        } () >>
            // | StructType
            //             << func() (Attrib, error) {
            //                     return ast.Node{$0.(ast.Node).Place, []string{}}, nil
            //             } () >>
            // | "[" "..." "]" ElementType
//                     << func() (Attrib, error) {
//                           fmt.Println("\"[\" \"...\" \"]\" ElementType");
//                           return nil, nil
//                     } () >>
//
//             | SliceType
//                   << func() (Attrib, error) {
//                         fmt.Println("SliceType");
//                         return nil, nil
//                   } () >>
//             | type
//                   << func() (Attrib, error) {
//                         fmt.Println("type");
//                         return nil, nil
//                   } () >>
            // When initializing structs, TypeName will be used as the name of struct.
            | TypeName
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
            ;
// TypeName  = identifier | QualifiedIdent .
// QualifiedIdent = PackageName "." identifier .
TypeName : identifier
                << func() (Attrib, error) {
                        return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
                } () >>
         // | type
         ;

LiteralValue : "{" RepeatTerminator "}"
                        << func() (Attrib, error) {
                                return ast.Node{"", []string{}}, nil
                        } () >>
             // NOTE: We don't support adding a ',' after the last KeyedElement
             // as opposed to the official go language.
             // TODO: Support for struct initialization.
             | "{" RepeatTerminator ElementList "}"
                        << func() (Attrib, error) {
                                return ast.Node{$2.(ast.Node).Place, $2.(ast.Node).Code}, nil
                        } () >>
             ;

ElementList : KeyedElement RepeatKeyedElement
                << func() (Attrib, error) {
                        n := ast.Node{fmt.Sprintf("%s, %s", $0.(ast.Node).Place, $1.(ast.Node).Place), $0.(ast.Node).Code}
                        n.Code = append(n.Code, $1.(ast.Node).Code...)
                        return n, nil
                } () >>
            ;

RepeatKeyedElement : "," RepeatTerminator KeyedElement RepeatKeyedElement
                        << func() (Attrib, error) {
                                n := ast.Node{fmt.Sprintf("%s, %s", $2.(ast.Node).Place, $3.(ast.Node).Place), $2.(ast.Node).Code}
                                n.Code = append(n.Code, $3.(ast.Node).Code...)
                                return n, nil
                        } () >>
                   | RepeatTerminator
                        << func() (Attrib, error) {
                                return ast.Node{"", []string{}}, nil
                        } () >>
//                    // | "," RepeatTerminator
//                    //      << func() (Attrib, error) {
//                    //            fmt.Println("\",\" RepeatTerminator");
//                    //            return nil, nil
//                    //      } () >>
//                    // | empty
//                    //      << func() (Attrib, error) {
//                    //            fmt.Println("empty");
//                    //            return nil, nil
//                    //      } () >>
                   ;

KeyedElement : Element
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
//              | Key ":" Element
//                 << func() (Attrib, error) {
//                         fmt.Println("Key \":\" Element");
//                         return nil, nil
//                 } () >>
             ;
//
// Key : FieldName
//         << func() (Attrib, error) {
//               fmt.Println("FieldName");
//               return nil, nil
//         } () >>
//     | Expression
//         << func() (Attrib, error) {
//               fmt.Println("Expression");
//               return nil, nil
//         } () >>
//     | LiteralValue
//         << func() (Attrib, error) {
//               fmt.Println("LiteralValue");
//               return nil, nil
//         } () >>
//     ;
//
// FieldName : identifier
//                 << func() (Attrib, error) {
//                       fmt.Println("identifier");
//                       return nil, nil
//                 } () >>
          // ;

Element : Expression
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
//         | LiteralValue
//                 << func() (Attrib, error) {
//                       fmt.Println("LiteralValue");
//                       return nil, nil
//                 } () >>
        ;
//
// // FunctionLit = "func" Signature FunctionBody .
// FunctionLit : kwdFunc Signature FunctionBody
//                 << func() (Attrib, error) {
//                       fmt.Println("kwdFunc Signature FunctionBody");
//                       return nil, nil
//                 } () >>
//             ;

OperandName : identifier
                << func() (Attrib, error) {
                        // return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
                        varName := string($0.(*token.Token).Lit)
                        symTabEntry, found := SearchInScope(varName)
                        if found {
                        	if _, ok := globalSymTab[varName]; ok {
                        		return ast.Node{varName, []string{}}, nil
                        	} else {
                                        return ast.Node{symTabEntry[0], []string{}}, nil
                        	}
                        } else {
                        	return nil, errors.New(fmt.Sprintf("%s not declared", varName))
                        }
                } () >>
            ;

// // Selector       = "." identifier .
// // Index          = "[" Expression "]" .
// // Slice          = "[" [ Expression ] ":" [ Expression ] "]" |
// //                  "[" [ Expression ] ":" Expression ":" Expression "]" .
// // TypeAssertion  = "." "(" Type ")" .
// // Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
// // Conversion = Type "(" Expression [ "," ] ")"
Selector : "." identifier
                << func() (Attrib, error) {
                        return ast.Node{string($1.(*token.Token).Lit), []string{}}, nil
                } () >>
         ;

Index : "[" Expression "]"
                << func() (Attrib, error) {
                        return ast.Node{$1.(ast.Node).Place, $1.(ast.Node).Code}, nil
                } () >>
      ;

// Slice : "[" ":" "]"
//               << func() (Attrib, error) {
//                     fmt.Println("\"[\" \":\" \"]\"");
//                     return nil, nil
//               } () >>
//       | "[" ":" Expression "]"
//               << func() (Attrib, error) {
//                     fmt.Println("\"[\" \":\" Expression \"]\"");
//                     return nil, nil
//               } () >>
//       | "[" Expression ":" "]"
//               << func() (Attrib, error) {
//                     fmt.Println("\"[\" Expression \":\" \"]\"");
//                     return nil, nil
//               } () >>
//       | "[" Expression ":" Expression "]"
//               << func() (Attrib, error) {
//                     fmt.Println("\"[\" Expression \":\" Expression \"]\"");
//                     return nil, nil
//               } () >>
//       | "[" ":" Expression ":" Expression "]"
//               << func() (Attrib, error) {
//                     fmt.Println("\"[\" \":\" Expression \":\" Expression \"]\"");
//                     return nil, nil
//               } () >>
//       | "[" Expression ":" Expression ":" Expression "]"
//               << func() (Attrib, error) {
//                     fmt.Println("\"[\" Expression \":\" Expression \":\" Expression \"]\"");
//                     return nil, nil
//               } () >>
//       ;
//
// TypeAssertion : "." "(" Type ")"
//               << func() (Attrib, error) {
//                     fmt.Println("\".\" \"(\" Type \")\"");
//                     return nil, nil
//               } () >>
//               ;

// Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
// NOTE: Since compilation of local variables has not yet been done, only empty
// arguments are supported for the time being.
Arguments : "(" ")"
              << func() (Attrib, error) {
                        return ast.Node{"", []string{}}, nil
                } () >>
          | "(" ExpressionList ")"
                << func() (Attrib, error) {
                      return ast.Node{$1.(ast.Node).Place, $1.(ast.Node).Code}, nil
                } () >>
//           | "(" ExpressionList "," ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" ExpressionList \",\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" ExpressionList "..." ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" ExpressionList \"...\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" ExpressionList "..." "," ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" ExpressionList \"...\" \",\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "," ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \",\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "..." ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \"...\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "..." "," ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \"...\" \",\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "," ExpressionList ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \",\" ExpressionList \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "," ExpressionList "," ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \",\" ExpressionList \",\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "," ExpressionList "..." ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \",\" ExpressionList \"...\" \")\"");
//                       return nil, nil
//                 } () >>
//           | "(" Type "," ExpressionList "..." "," ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("\"(\" Type \",\" ExpressionList \"...\" \",\" \")\"");
//                       return nil, nil
//                 } () >>
          ;
//
// Conversion : Type "(" Expression ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("Type \"(\" Expression \")\"");
//                       return nil, nil
//                 } () >>
//            | Type "(" Expression "," ")"
//                << func() (Attrib, error) {
//                      fmt.Println("Type \"(\" Expression \",\" \")\"");
//                      return nil, nil
//                } () >>
//            ;

// FunctionDecl = "func" FunctionName Signature [ FunctionBody ] .
// FunctionName = identifier .
// FunctionBody = Block .
// NOTE: To support recursion, we need to add function's symbol table entry before
// the production rule for block of its body is reached. This is to avoid errors
// of the form "funcion not declared". A marker is introduced for the same.
FunctionDecl : FunctionMarker FunctionBody
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $1.(ast.Node).Code...)
                        funcSymtabCreated = false // end of function block
                        // Return statement insertion will be handled when defer
                        // stack is emptied and the deferred calls are inserted.
                        addRetStmt := false
                        if deferStack.Len > 0 {
                                addRetStmt = true
                        }
                        for deferStack.Len > 0 {
                                deferFuncCode := deferStack.Pop().(DeferStackItem)
                                n.Code = append(n.Code, deferFuncCode...)
                        }
                        if addRetStmt {
                                n.Code = append(n.Code, fmt.Sprintf("ret,"))
                        }
                        return n, nil
                } () >>
             // TODO Handle function declarations without body.
             // | kwdFunc FunctionName Signature
             ;

FunctionMarker : kwdFunc FunctionName Signature
                << func() (Attrib, error) {
                        n := ast.Node{$1.(ast.Node).Place, []string{fmt.Sprintf("func, %s", $1.(ast.Node).Place)}}
                        // Assign values to arguments.
                        for k, v := range $2.(ast.Node).Code {
                                n.Code = append(n.Code, fmt.Sprintf("=, %s, %s.%d", v, $1.(ast.Node).Place, k))
                        }
                        if _, found := globalSymTab[$1.(ast.Node).Place]; !found {
                                globalSymTab[$1.(ast.Node).Place] = []string{fmt.Sprintf("func:%s", $2.(ast.Node).Place)}
                        } else {
                                return nil, errors.New(fmt.Sprintf("Function %s already declared\n", string($0.(*token.Token).Lit)))
                        }
                        return n, nil
                } () >>
                ;

// Signature      = Parameters [ Result ] .
// Result         = Parameters | Type .
// Parameters     = "(" [ ParameterList [ "," ] ] ")" .
// ParameterList  = ParameterDecl { "," ParameterDecl } .
// ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
Signature : Parameters
            << func() (Attrib, error) {
                      // The parent symbol table in case of function declaration
                      // will be nil as functions can only be declared globally.
                      childSymTab := SymInfo{make(symTabType), currSymTab}
                      // Update the current symbol table to point to the newly
                      // created symbol table.
                      currSymTab = &childSymTab
                      for _, v := range $0.(ast.Node).Code {
                            if v == "" {
                                  break
                            }
                            currSymTab.varSymTab[v] = []string{v, "int"}
                      }
                      return ast.Node{"0", $0.(ast.Node).Code}, nil
                } () >>

           | Parameters Result
                 << func() (Attrib, error) {
                       // The parent symbol table in case of function declaration
                       // will be nil as functions can only be declared globally.
                       childSymTab := SymInfo{make(symTabType), currSymTab}
                       // Update the current symbol table to point to the newly
                       // created symbol table.
                       currSymTab = &childSymTab
                       for _, v := range $0.(ast.Node).Code {
                             if v == "" {
                                   break
                             }
                             currSymTab.varSymTab[v] = []string{v, "int"}
                       }
                       return ast.Node{fmt.Sprintf("%s", $1.(ast.Node).Place), $0.(ast.Node).Code}, nil
                 } () >>
          ;

Result : Parameters
              << func() (Attrib, error) {
                    returnLength := 0
                    // finding number of return variable
                    for _, v := range $0.(ast.Node).Code {
                            if v == "int" {
                                    returnLength ++
                            }
                    }
                    return ast.Node{fmt.Sprintf("%d", returnLength), []string{}}, nil
              } () >>
       | Type
              << func() (Attrib, error) {
                    return ast.Node{"1", []string{}}, nil
              } () >>
       ;

// TODO: Ignore terminator
// TODO: Parameters cannot end in ','
Parameters : "(" RepeatTerminator ")"
                  << func() (Attrib, error) {
                      return ast.Node{"", []string{}}, nil
                } () >>
           | "(" ParameterList ")"
                << func() (Attrib, error) {
                      return ast.Node{"", $1.(ast.Node).Code}, nil
                } () >>
           ;

ParameterList : ParameterDecl RepeatParameterDecl
                << func() (Attrib, error) {
                      n := ast.Node{"", $0.(ast.Node).Code}
                      n.Code = append(n.Code, $1.(ast.Node).Code...)
                      return n, nil
                } () >>
              ;
//
RepeatParameterDecl : "," ParameterDecl RepeatParameterDecl
                        << func() (Attrib, error) {
                              n := ast.Node{"", $1.(ast.Node).Code}
                              n.Code = append(n.Code, $2.(ast.Node).Code...)
                              return n, nil
                        } () >>
                        | empty
                        << func() (Attrib, error) {
                              return ast.Node{"", []string{}}, nil
                        } () >>
                    ;
//
ParameterDecl : IdentifierList Type
                << func() (Attrib, error) {
                      return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
                | Type
                << func() (Attrib, error) {
                      return ast.Node{"", []string{fmt.Sprintf("int")}}, nil
                } () >>
//                 | "..." Type
//                 << func() (Attrib, error) {
//                       fmt.Println("\"...\" Type");
//                       return nil, nil
//                 } () >>
//                 | IdentifierList "..." Type
//                 << func() (Attrib, error) {
//                       fmt.Println("IdentifierList \"...\" Type");
//                       return nil, nil
//                 } () >>
              ;

// Type      = TypeName | TypeLit | "(" Type ")" .
// TypeName  = identifier | QualifiedIdent .
// TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
//             SliceType | MapType | ChannelType .
Type : type
        << func() (Attrib, error) {
              return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
        } () >>
//       | identifier
//         << func() (Attrib, error) {
//                 fmt.Println("identifier");
//                 return nil, nil
//         } () >>
      | TypeLit
        << func() (Attrib, error) {
              return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
        } () >>
//       | "(" Type ")"
//         << func() (Attrib, error) {
//               fmt.Println("\"(\" Type \")\"");
//               return nil, nil
//         } () >>
     ;

TypeLit : StructType
                << func() (Attrib, error) {
                        return ast.Node{"struct", $0.(ast.Node).Code}, nil
                } () >>
        // | ArrayType
        // << func() (Attrib, error) {
        //       fmt.Println("StructType");
        //       return nil, nil
        // } () >>
//         | PointerType
//         << func() (Attrib, error) {
//               fmt.Println("PointerType");
//               return nil, nil
//         } () >>
//         | FunctionType
//         << func() (Attrib, error) {
//               fmt.Println("FunctionType");
//               return nil, nil
//         } () >>
//         | SliceType
//         << func() (Attrib, error) {
//               fmt.Println("SliceType");
//               return nil, nil
//         } () >>
        ;

// ArrayType   = "[" ArrayLength "]" ElementType .
// ArrayLength = Expression .
// ElementType = Type .
ArrayType : "[" ArrayLength "]" ElementType
                << func() (Attrib, error) {
                        // TODO: ElementType is taken to be only int for now.
                        return ast.Node{fmt.Sprintf("array:%s", $1.(ast.Node).Place), []string{}}, nil
                } () >>
          ;

// NOTE: ArrayLength is modified to be only an integer, unlike in Go where it is
// an expression.
ArrayLength : intLit
                << func() (Attrib, error) {
                        return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
                } () >>
            ;

ElementType : Type
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, []string{}}, nil
                } () >>
            ;

// StructType    = kwdStruct "{" { FieldDecl ";" } "}" .
// FieldDecl     = (IdentifierList Type | EmbeddedField) [ Tag ] .
// EmbeddedField = [ "*" ] TypeName .
// Tag           = string_lit .
StructType : kwdStruct RepeatTerminator "{" RepeatTerminator RepeatFieldDecl "}"
                << func() (Attrib, error) {
                        return ast.Node{"", $4.(ast.Node).Code}, nil
                } () >>
           ;

RepeatFieldDecl : FieldDecl terminator RepeatTerminator RepeatFieldDecl
                        << func() (Attrib, error) {
                                n := ast.Node{"", $0.(ast.Node).Code}
                                n.Code = append(n.Code, $3.(ast.Node).Code...)
                                return n, nil
                        } () >>
                | FieldDecl RepeatTerminator
                        << func() (Attrib, error) {
                                return ast.Node{"", $0.(ast.Node).Code}, nil
                        } () >>
                ;

FieldDecl : IdentifierList Type
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        for _, v := range $0.(ast.Node).Code {
                                n.Code = append(n.Code, v)
                                n.Code = append(n.Code, $1.(ast.Node).Place)
                        }
                        return n, nil
                } () >>
//           | IdentifierList Type Tag
//                 << func() (Attrib, error) {
//                       fmt.Println("IdentifierList Type Tag");
//                       return nil, nil
//                 } () >>
//           | EmbeddedField
//                 << func() (Attrib, error) {
//                       fmt.Println("EmbeddedField");
//                       return nil, nil
//                 } () >>
//           | EmbeddedField Tag
//                 << func() (Attrib, error) {
//                       fmt.Println("EmbeddedField Tag");
//                       return nil, nil
//                 } () >>
          | empty
                << func() (Attrib, error) {
                        return ast.Node{"", []string{}}, nil
                } () >>
          ;

// EmbeddedField : type
//                 << func() (Attrib, error) {
//                       fmt.Println("type");
//                       return nil, nil
//                 } () >>
//               | "*" type
//                 << func() (Attrib, error) {
//                       fmt.Println("\"*\" type");
//                       return nil, nil
//                 } () >>
//               ;
//
// Tag : stringLit
//         << func() (Attrib, error) {
//               fmt.Println("stringLit");
//               return nil, nil
//         } () >>
//     ;
//
// // PointerType = "*" BaseType .
// // BaseType    = Type .
// PointerType : "*" BaseType
//                 << func() (Attrib, error) {
//                       fmt.Println("\"*\" BaseType");
//                       return nil, nil
//                 } () >>
//             ;
//
// BaseType : Type
//                 << func() (Attrib, error) {
//                       fmt.Println("Type");
//                       return nil, nil
//                 } () >>
//          ;
//
// // FunctionType   = "func" Signature .
// // Signature      = Parameters [ Result ] .
// // Result         = Parameters | Type .
// // Parameters     = "(" [ ParameterList [ "," ] ] ")" .
// // ParameterList  = ParameterDecl { "," ParameterDecl } .
// // ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
// FunctionType : kwdFunc Signature
//                 << func() (Attrib, error) {
//                       fmt.Println("kwdFunc Signature");
//                       return nil, nil
//                 } () >>
//              ;
//
// // SliceType = "[" "]" ElementType .
// SliceType : "[" "]" ElementType
//                 << func() (Attrib, error) {
//                       fmt.Println("\"[\" \"]\" ElementType");
//                       return nil, nil
//                 } () >>
//           ;

// IdentifierList = identifier { "," identifier } .
IdentifierList : identifier
                        << func() (Attrib, error) {
                                return ast.Node{"", []string{string($0.(*token.Token).Lit)}}, nil
                        } () >>
               | identifier "," IdentifierList
                        << func() (Attrib, error) {
                                // The lexemes corresponding to the individual identifiers
                                // are appended to the slice for code to avoid adding
                                // comma-separated string in place since the identifiers
                                // don't have any IR code to be added.
                                n := ast.Node{"", []string{string($0.(*token.Token).Lit)}}
                                n.Code = append(n.Code, $2.(ast.Node).Code...)
                                return n, nil
                        } () >>
               ;

FunctionName : identifier
                << func() (Attrib, error) {
                        // The symbol table entry for a function is of the form -
                        //      functionName : ["func", (rest of the values are yet to be decided)]

                        return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
                 } () >>
              ;

FunctionBody : Block
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
             ;

RepeatTerminator : terminator RepeatTerminator
                 | empty
                 ;

StatementList : Statement terminator RepeatTerminator StatementList
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $3.(ast.Node).Code...)
                        return n, nil
                } () >>
              | Statement RepeatTerminator
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
              ;

// Statement = Declaration | LabeledStmt | SimpleStmt |
//             GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
//             FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
//             DeferStmt .
// NOTE: The following additional statements are introduced.
// PrintIntStmt
Statement : Declaration
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | LabeledStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | SimpleStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | ReturnStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | BreakStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | ContinueStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | GotoStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          // TODO: FallthroughStmt is not supported currently.
          | Block
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | IfStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | SwitchStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | ForStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | DeferStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | PrintStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | ScanStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          ;

// LabeledStmt = Label ":" Statement .
// Label       = identifier .
LabeledStmt : Label ":" RepeatTerminator Statement
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{fmt.Sprintf("label, %s", $0.(ast.Node).Place)}}
                        n.Code = append(n.Code, $3.(ast.Node).Code...)
                        return n, nil
                } () >>
            ;

// SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
// EmptyStmt = .
// ExpressionStmt = Expression .
// IncDecStmt = Expression ( "++" | "--" ) .
// Assignment = ExpressionList assign_op ExpressionList .
// assign_op = [ add_op | mul_op ] "=" .
// ShortVarDecl = IdentifierList ":=" ExpressionList .
SimpleStmt : EmptyStmt
                << func() (Attrib, error) {
                        return ast.Node{"", []string{}}, nil
                } () >>
           | Assignment
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
           | ShortVarDecl
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
           | IncDecStmt
                << func() (Attrib, error) {
                       return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
           | ExpressionStmt
                << func() (Attrib, error) {
                      return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
        ;
//            | Assignment
//                << func() (Attrib, error) {
//                      fmt.Println("Assignment");
//                      return nil, nil
//                } () >>
//            | ShortVarDecl
//                << func() (Attrib, error) {
//                      fmt.Println("ShortVarDecl");
//                      return nil, nil
//                } () >>
//            | EmptyStmt
//                << func() (Attrib, error) {
//                      fmt.Println("EmptyStmt");
//                      return nil, nil
//                } () >>
//            ;

EmptyStmt : empty ;

ReturnStmt : kwdRet
                << func() (Attrib, error) {
                        // The defer statements need to be inserted before the return stmt (and
                        // not at the end of function block as was the previous misconception).
                        // When defer stmt is used, the return stmt for main() is also inserted
                        // when all the defer calls from stack are popped and inserted in IR.
                        if deferStack.Len > 0 {
                                // Return statement insertion will be handled when defer
                                // stack is emptied and the deferred calls are inserted.
                                return ast.Node{"", []string{}}, nil
                        } else {
                                return ast.Node{"", []string{"ret,"}}, nil
                        }
                } () >>
           | kwdRet ExpressionList
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        if deferStack.Len == 0 {
                                retExpr := utils.SplitAndSanitize($1.(ast.Node).Place, ",")
                                n.Code = append(n.Code, $1.(ast.Node).Code...)
                                for k, v := range retExpr {
                                      n.Code = append(n.Code, fmt.Sprintf("=, return.%d, %s", k, v))
                                }
                                n.Code = append(n.Code, fmt.Sprintf("ret,"))
                        }
                        return n, nil
                } () >>
           ;

// BreakStmt = "break" [ Label ] .
BreakStmt : kwdBreak
                << func() (Attrib, error) {
                        return ast.Node{"", []string{"break"}}, nil
                } () >>
          | kwdBreak Label
                << func() (Attrib, error) {
                        return ast.Node{"", []string{fmt.Sprintf("j, %s", $1.(ast.Node).Place)}}, nil
                } () >>
          ;

// ContinueStmt = "continue" [ Label ] .
ContinueStmt : kwdContinue
                << func() (Attrib, error) {
                        return ast.Node{"", []string{"continue"}}, nil
                } () >>
             // TODO: `continue label` vs `break label` ??
             // | kwdContinue Label
             //    << func() (Attrib, error) {
             //          fmt.Println("kwdContinue Label");
             //          return nil, nil
             //    } () >>
              ;

// GotoStmt = "goto" Label .
GotoStmt : kwdGoto Label
                << func() (Attrib, error) {
                        return ast.Node{"", []string{fmt.Sprintf("j, %s", $1.(ast.Node).Place)}}, nil
                } () >>
         ;

Block : "{" Marker RepeatTerminator StatementList "}"
                << func() (Attrib, error) {
                        // start of block
                        currSymTab = currSymTab.parent // end of block
                        return ast.Node{"", $3.(ast.Node).Code}, nil
                } () >>
      ;

// NOTE: Marker demarcates the beginning of a block and the corresponding symbol
// table is instantiated here.
Marker : empty
                << func() (Attrib, error) {
                        if funcSymtabCreated {
                                // The symbol table for functions is created when the
                                // rule for Signature is reached so that the arguments
                                // can also be added. At this point the function block
                                // (if there was any) has completed.
                                childSymTab := SymInfo{make(symTabType), currSymTab}
                                // Update the current symbol table to point to the newly
                                // created symbol table.
                                currSymTab = &childSymTab
                        } else {
                                // Allow creation of symbol table for another function.
                                funcSymtabCreated = true
                        }
                        return nil, nil
                } () >>
        ;

// IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
IfStmt : kwdIf Expression Block
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", afterLabel, $1.(ast.Node).Place))
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        n.Code = append(n.Code, "\n")
                        return n, nil
                } () >>
        | kwdIf Expression Block kwdElse Block
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        elseLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", elseLabel, $1.(ast.Node).Place))
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", elseLabel))
                        n.Code = append(n.Code, $4.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
        | kwdIf Expression Block kwdElse IfStmt
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        elseLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", elseLabel, $1.(ast.Node).Place))
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", elseLabel))
                        n.Code = append(n.Code, $4.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
       | kwdIf SimpleStmt terminator Expression Block
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, $3.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", afterLabel, $3.(ast.Node).Place))
                        n.Code = append(n.Code, $4.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
       | kwdIf SimpleStmt terminator Expression Block kwdElse IfStmt
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        elseLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, $3.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", elseLabel, $3.(ast.Node).Place))
                        n.Code = append(n.Code, $4.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", elseLabel))
                        n.Code = append(n.Code, $6.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil

                } () >>
        | kwdIf SimpleStmt terminator Expression Block kwdElse Block
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        elseLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, $3.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", elseLabel, $3.(ast.Node).Place))
                        n.Code = append(n.Code, $4.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", elseLabel))
                        n.Code = append(n.Code, $6.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
       ;

// SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
SwitchStmt : ExprSwitchStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
//            | TypeSwitchStmt
//                << func() (Attrib, error) {
//                      fmt.Println("TypeSwitchStmt");
//                      return nil, nil
//                } () >>
           ;

// ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
// ExprCaseClause = ExprSwitchCase ":" StatementList .
// ExprSwitchCase = "case" ExpressionList | "default" .
        ExprSwitchStmt : kwdSwitch Expression "{" RepeatTerminator RepeatExprCaseClause "}"
                        << func() (Attrib, error) {
                                n := ast.Node{"", $1.(ast.Node).Code}
                                caseLabels := []string{}
                                caseStmts := $4.(ast.Node).Code
                                // SplitAndSanitize cannot be used here as removal of empty
                                // entries seems to be causing erroneous index calculations.
                                // Regression caused in "test/codegen/switch.go".
                                caseTemporaries := strings.Split($4.(ast.Node).Place, ",")
                                afterLabel := NewLabel()
                                defaultLabel := afterLabel
                                // The last value in caseTemporaries will be the place value
                                // returned by Empty (arising from RepeatExprCaseClause -> Empty).
                                // This has to be ignored.
                                for k, v := range caseTemporaries[:len(caseTemporaries)-1] {
                                        caseLabel := NewLabel()
                                        caseLabels = append(caseLabels, caseLabel)
                                        n.Code = append(n.Code, caseStmts[2*k])
                                        if strings.TrimSpace(v) == "default" {
                                                defaultLabel = caseLabel
                                        } else {
                                                n.Code = append(n.Code, fmt.Sprintf("beq, %s, %s, %s", caseLabel, $1.(ast.Node).Place, v))
                                        }
                                }
                                n.Code = append(n.Code, fmt.Sprintf("j, %s", defaultLabel))
                                for k, v := range caseLabels {
                                        n.Code = append(n.Code, fmt.Sprintf("label, %s", v))
                                        n.Code = append(n.Code, caseStmts[2*k+1])
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                                }
                                n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                                return n, nil
                        } () >>
                  // TODO: Handle empty expression
//                | kwdSwitch "{" RepeatTerminator RepeatExprCaseClause "}"
//                        << func() (Attrib, error) {
//                              fmt.Println("kwdSwitch Expression \"{\" RepeatTerminator RepeatExprCaseClause \"}\"");
//                              return nil, nil
//                        } () >>
//                | kwdSwitch SimpleStmt terminator "{" RepeatTerminator RepeatExprCaseClause "}"
//                        << func() (Attrib, error) {
//                              fmt.Println("kwdSwitch SimpleStmt terminator \"{\" RepeatTerminator RepeatExprCaseClause \"}\"");
//                              return nil, nil
//                        } () >>
//                | kwdSwitch SimpleStmt terminator Expression "{" RepeatTerminator RepeatExprCaseClause "}"
//                        << func() (Attrib, error) {
//                              fmt.Println("kwdSwitch SimpleStmt terminator Expression \"{\" RepeatTerminator RepeatExprCaseClause \"}\"");
//                              return nil, nil
//                        } () >>
               ;

RepeatExprCaseClause : ExprCaseClause RepeatExprCaseClause
                        << func() (Attrib, error) {
                                n := ast.Node{"", $0.(ast.Node).Code}
                                n.Code = append(n.Code, $1.(ast.Node).Code...)
                                n.Place = fmt.Sprintf("%s, %s", $0.(ast.Node).Place, $1.(ast.Node).Place)
                                return n, nil
                        } () >>
                     | empty
                        << func() (Attrib, error) {
                                return ast.Node{"", []string{}}, nil
                        } () >>
                     ;

// ExprCaseClause = ExprSwitchCase ":" StatementList .
// ExprSwitchCase = "case" ExpressionList | "default" .
ExprCaseClause : ExprSwitchCase ":" RepeatTerminator StatementList
                        << func() (Attrib, error) {
                                n := ast.Node{$0.(ast.Node).Place, []string{}}
                                exprCode := ""
                                for _, v := range $0.(ast.Node).Code {
                                        exprCode += v
                                        exprCode += "\n"
                                }
                                n.Code = append(n.Code, exprCode)
                                stmtCode := ""
                                for _, v := range $3.(ast.Node).Code {
                                        stmtCode += v
                                        stmtCode += "\n"
                                }
                                n.Code = append(n.Code, stmtCode)
                                return n, nil
                        } () >>
               ;

// NOTE: The grammar is modified to support only a single expression in a
// switch statement.
// ExprSwitchCase : kwdCase ExpressionList
ExprSwitchCase : kwdCase Expression
                        << func() (Attrib, error) {
                                return ast.Node{$1.(ast.Node).Place, $1.(ast.Node).Code}, nil
                        } () >>
               | kwdDefault
                        << func() (Attrib, error) {
                                return ast.Node{"default", []string{}}, nil
                        } () >>
               ;
//
// // TypeSwitchStmt  = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
// // TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
// // TypeCaseClause  = TypeSwitchCase ":" StatementList .
// // TypeSwitchCase  = "case" TypeList | "default" .
// // TypeList        = Type { "," Type } .
// TypeSwitchStmt : kwdSwitch TypeSwitchGuard "{" RepeatTerminator RepeatTypeCaseClause "}"
//                       << func() (Attrib, error) {
//                             fmt.Println("kwdSwitch TypeSwitchGuard \"{\" RepeatTerminator RepeatTypeCaseClause \"}\"");
//                             return nil, nil
//                       } () >>
//                | kwdSwitch SimpleStmt terminator TypeSwitchGuard "{" RepeatTerminator RepeatTypeCaseClause "}"
//                      << func() (Attrib, error) {
//                            fmt.Println("kwdSwitch SimpleStmt terminator TypeSwitchGuard \"{\" RepeatTerminator RepeatTypeCaseClause \"}\"");
//                            return nil, nil
//                      } () >>
//                ;
//
// RepeatTypeCaseClause : TypeCaseClause RepeatTypeCaseClause
//                     << func() (Attrib, error) {
//                           fmt.Println("TypeCaseClause RepeatTypeCaseClause");
//                           return nil, nil
//                     } () >>
//                      | empty
//                      << func() (Attrib, error) {
//                            fmt.Println("empty");
//                            return nil, nil
//                      } () >>
//                      ;
//
// TypeSwitchGuard : PrimaryExpr "." "(" kwdType ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("PrimaryExpr \".\" \"(\" kwdType \")\"");
//                       return nil, nil
//                 } () >>
//                 | identifier shortAssign PrimaryExpr "." "(" kwdType ")"
//                 << func() (Attrib, error) {
//                       fmt.Println("identifier shortAssign PrimaryExpr \".\" \"(\" kwdType \")\"");
//                       return nil, nil
//                 } () >>
//                 ;
//
// TypeCaseClause : TypeSwitchCase ":" StatementList
//                 << func() (Attrib, error) {
//                       fmt.Println("TypeSwitchCase \":\" StatementList");
//                       return nil, nil
//                 } () >>
//                ;
//
// TypeSwitchCase : kwdCase TypeList
//                 << func() (Attrib, error) {
//                       fmt.Println("kwdCase TypeList");
//                       return nil, nil
//                 } () >>
//                | kwdDefault
//                 << func() (Attrib, error) {
//                       fmt.Println("kwdDefault");
//                       return nil, nil
//                 } () >>
//                ;
//
// TypeList : Type RepeatType
//                 << func() (Attrib, error) {
//                       fmt.Println("Type RepeatType");
//                       return nil, nil
//                 } () >>
//          ;
//
// RepeatType : "," Type RepeatType
//                 << func() (Attrib, error) {
//                       fmt.Println("\",\" Type RepeatType");
//                       return nil, nil
//                 } () >>
//            | empty
//                 << func() (Attrib, error) {
//                       fmt.Println("empty");
//                       return nil, nil
//                 } () >>
//            ;

// ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
// Condition = Expression .
ForStmt : kwdFor Block
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        startLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", startLabel))
                        for _, v := range $1.(ast.Node).Code {
                                v := strings.TrimSpace(v)
                                if v == "break" {
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                                } else if v == "continue" {
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", startLabel))
                                } else {
                                        n.Code = append(n.Code, v)
                                }
                        }
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", startLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
        | kwdFor Condition Block
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        startLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", startLabel))
                        n.Code = append(n.Code, $1.(ast.Node).Code...)
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", afterLabel, $1.(ast.Node).Place))
                        for _, v := range $2.(ast.Node).Code {
                                v := strings.TrimSpace(v)
                                if v == "break" {
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                                } else if v == "continue" {
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", startLabel))
                                } else {
                                        n.Code = append(n.Code, v)
                                }
                        }
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", startLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
        | kwdFor ForClause Block
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        startLabel := NewLabel()
                        afterLabel := NewLabel()
                        n.Code = append(n.Code, $1.(ast.Node).Code[0]) // init statement
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", startLabel))
                        n.Code = append(n.Code, $1.(ast.Node).Code[1]) // condition
                        n.Code = append(n.Code, fmt.Sprintf("blt, %s, %s, 1", afterLabel, $1.(ast.Node).Place))
                        for _, v := range $2.(ast.Node).Code {
                                v := strings.TrimSpace(v)
                                if v == "break" {
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", afterLabel))
                                } else if v == "continue" {
                                        n.Code = append(n.Code, fmt.Sprintf("j, %s", startLabel))
                                } else {
                                        n.Code = append(n.Code, v)
                                }
                        }
                        n.Code = append(n.Code, $1.(ast.Node).Code[2]) // post statement
                        n.Code = append(n.Code, fmt.Sprintf("j, %s", startLabel))
                        n.Code = append(n.Code, fmt.Sprintf("label, %s", afterLabel))
                        return n, nil
                } () >>
//         | kwdFor RangeClause Block
//                 << func() (Attrib, error) {
//                       fmt.Println("kwdFor RangeClause Block");
//                       return nil, nil
//                 } () >>
        ;
//
// // RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
// RangeClause : kwdRange Expression
//                 << func() (Attrib, error) {
//                       fmt.Println("kwdRange Expression");
//                       return nil, nil
//                 } () >>
//             | ExpressionList "=" kwdRange Expression
//                 << func() (Attrib, error) {
//                       fmt.Println("ExpressionList \"=\" kwdRange Expression");
//                       return nil, nil
//                 } () >>
//             | IdentifierList shortAssign kwdRange Expression
//                 << func() (Attrib, error) {
//                       fmt.Println("IdentifierList shortAssign kwdRange Expression");
//                       return nil, nil
//                 } () >>
//             ;

// ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
// InitStmt = SimpleStmt .
// PostStmt = SimpleStmt .
// NOTE: The place value of ForClause contains the place value of the condition
// statement as that will be required in ForStmt to determine when to break. The
// place values of InitStmt and PostStmt will not be required.
// The code value of ForClause contains newline separated codes of InitStmt,
// Condition and PostStmt.
ForClause : terminator terminator
              << func() (Attrib, error) {
                      // When Condition is not specified, do an endless loop by
                      // initializing the place value to 1.
                      return ast.Node{"1", []string{"", "", ""}}, nil
              } () >>
          | InitStmt terminator terminator
              << func() (Attrib, error) {
                        initStmtCode := ""
                        for _, v := range $0.(ast.Node).Code {
                                initStmtCode += v
                                initStmtCode += "\n"
                        }
                        return ast.Node{"1", []string{initStmtCode, "", ""}}, nil
              } () >>
          | terminator Condition terminator
              << func() (Attrib, error) {
                        condCode := ""
                        for _, v := range $1.(ast.Node).Code {
                                condCode += v
                                condCode += "\n"
                        }
                        return ast.Node{$1.(ast.Node).Place, []string{"", condCode, ""}}, nil
              } () >>
          | terminator terminator PostStmt
              << func() (Attrib, error) {
                        postStmtCode := ""
                        for _, v := range $2.(ast.Node).Code {
                                postStmtCode += v
                                postStmtCode += "\n"
                        }
                        return ast.Node{"1", []string{"", "", postStmtCode}}, nil
              } () >>
          | InitStmt terminator Condition terminator
              << func() (Attrib, error) {
                        initStmtCode := ""
                        for _, v := range $0.(ast.Node).Code {
                                initStmtCode += v
                                initStmtCode += "\n"
                        }
                        condCode := ""
                        for _, v := range $2.(ast.Node).Code {
                                condCode += v
                                condCode += "\n"
                        }
                        return ast.Node{$2.(ast.Node).Place, []string{initStmtCode, condCode, ""}}, nil
              } () >>
          | InitStmt terminator terminator PostStmt
              << func() (Attrib, error) {
                        initStmtCode := ""
                        for _, v := range $0.(ast.Node).Code {
                                initStmtCode += v
                                initStmtCode += "\n"
                        }
                        postStmtCode := ""
                        for _, v := range $3.(ast.Node).Code {
                                postStmtCode += v
                                postStmtCode += "\n"
                        }
                        return ast.Node{"1", []string{initStmtCode, "", postStmtCode}}, nil
              } () >>
          | terminator Condition terminator PostStmt
              << func() (Attrib, error) {
                        condCode := ""
                        for _, v := range $1.(ast.Node).Code {
                                condCode += v
                                condCode += "\n"
                        }
                        postStmtCode := ""
                        for _, v := range $3.(ast.Node).Code {
                                postStmtCode += v
                                postStmtCode += "\n"
                        }
                        return ast.Node{$1.(ast.Node).Place, []string{"", condCode, postStmtCode}}, nil
              } () >>
          | InitStmt terminator Condition terminator PostStmt
              << func() (Attrib, error) {
                        initStmtCode := ""
                        for _, v := range $0.(ast.Node).Code {
                                initStmtCode += v
                                initStmtCode += "\n"
                        }
                        condCode := ""
                        for _, v := range $2.(ast.Node).Code {
                                condCode += v
                                condCode += "\n"
                        }
                        postStmtCode := ""
                        for _, v := range $4.(ast.Node).Code {
                                postStmtCode += v
                                postStmtCode += "\n"
                        }
                        return ast.Node{$2.(ast.Node).Place, []string{initStmtCode, condCode, postStmtCode}}, nil
              } () >>
          ;

InitStmt : SimpleStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
         ;

PostStmt : SimpleStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
         ;

// FIXME: Condition can only be a binary expression.
Condition : Expression
                << func() (Attrib, error) {
                        return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
          ;

// DeferStmt = "defer" Expression .
// NOTE: Currently defer only handles function calls and not method calls.
DeferStmt : "defer" PrimaryExpr Arguments
                << func() (Attrib, error) {
                        // Add code corresponding to the arguments.
                        n := ast.Node{"", $2.(ast.Node).Code}
                        argExpr := utils.SplitAndSanitize($2.(ast.Node).Place, ",")
                        for k, v := range argExpr {
                              n.Code = append(n.Code, fmt.Sprintf("=, %s.%d, %s", $1.(ast.Node).Place, k, v))
                        }
                        n.Place = NewTmp()
                        // The code for the actual function call needs to be pushed to the defer stack.
                        deferCode := make(DeferStackItem, 0)
                        deferCode = append(deferCode, fmt.Sprintf("call, %s", $1.(ast.Node).Place))
                        deferCode = append(deferCode, fmt.Sprintf("store, %s", n.Place))
                        deferStack.Push(deferCode)
                        return n, nil
                } () >>
          ;

PrintStmt : PrintIntStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          | PrintStrStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          ;

ScanStmt : ScanIntStmt
                << func() (Attrib, error) {
                        return ast.Node{"", $0.(ast.Node).Code}, nil
                } () >>
          ;

PrintIntStmt : "printInt" Expression
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        n.Code = append(n.Code, fmt.Sprintf("printInt, %s, %s", $1.(ast.Node).Place, $1.(ast.Node).Place))
                        return n, nil
                } () >>
             ;

PrintStrStmt : "printStr" Expression
                << func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        n.Code = append(n.Code, fmt.Sprintf("printStr, %s", $1.(ast.Node).Place))
                        return n, nil
                } () >>
             ;

ScanIntStmt : "scanInt" Expression
		<< func() (Attrib, error) {
                        n := ast.Node{"", $1.(ast.Node).Code}
                        n.Code = append(n.Code, fmt.Sprintf("scanInt, %s", $1.(ast.Node).Place))
                        return n, nil
               } () >>
            ;

ExpressionStmt : Expression
                << func() (Attrib, error) {
                      return ast.Node{$0.(ast.Node).Place, $0.(ast.Node).Code}, nil
                } () >>
               ;

IncDecStmt : Expression "++"
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, fmt.Sprintf("+, %s, %s, 1", $0.(ast.Node).Place, $0.(ast.Node).Place))
                        return n, nil
                } () >>
           | Expression "--"
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, fmt.Sprintf("-, %s, %s, 1", $0.(ast.Node).Place, $0.(ast.Node).Place))
                        return n, nil
                } () >>
           ;

Assignment : ExpressionList assignOp ExpressionList
                << func() (Attrib, error) {
                        op := string($1.(*token.Token).Lit)[0]
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        leftExpr := utils.SplitAndSanitize($0.(ast.Node).Place, ",")
                        rightExpr := utils.SplitAndSanitize($2.(ast.Node).Place, ",")
                        for k, v := range leftExpr {
                                n.Code = append(n.Code, fmt.Sprintf("%s, %s, %s, %s", op, v, v, rightExpr[k]))
                                _, ok := symTab[v]
                                if ok {
                                        if symTab[v][1] == "array" {
                                                arrayInfo := utils.SplitAndSanitize(symTab[v][0], ",")
                                                // arrayInfo contains the following info -
                                                //      0th index: array name
                                                //      1st index: array index
                                                n.Code = append(n.Code, fmt.Sprintf("into, %s, %s, %s, %s", arrayInfo[0], arrayInfo[0], arrayInfo[1], v))
                                        }
                                }
                        }
                        return n, nil
                } () >>
           // TODO : Redundant code
           | ExpressionList "=" ExpressionList
                << func() (Attrib, error) {
                        n := ast.Node{"", $0.(ast.Node).Code}
                        n.Code = append(n.Code, $2.(ast.Node).Code...)
                        leftExpr := utils.SplitAndSanitize($0.(ast.Node).Place, ",")
                        rightExpr := utils.SplitAndSanitize($2.(ast.Node).Place, ",")
                        if len(leftExpr) != len(rightExpr) {
                                return nil, errors.New("Number of values in LHS and RHS is not equal")
                        }
                        for k, v := range leftExpr {
                                if len(currSymTab.varSymTab[GetRealName(v)]) >= 2 && currSymTab.varSymTab[GetRealName(v)][1] == "pointer" {
                                        if len(rightExpr[k]) >= 7 && rightExpr[k][:7] == "pointer" {
                                                currSymTab.varSymTab[GetRealName(v)][3] = currSymTab.varSymTab[GetRealName(rightExpr[k][8:])][0]
                                        } else {
                                                currSymTab.varSymTab[GetRealName(v)][3] = currSymTab.varSymTab[GetRealName(rightExpr[k])][3]
                                        }
                                } else if len(rightExpr[k]) >= 5 && rightExpr[k][:5] == "deref" && len(v) >= 5 && v[:5] == "deref" {
                                        n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", currSymTab.varSymTab[GetRealName(v[6:])][3], currSymTab.varSymTab[GetRealName(rightExpr[k][6:])][3]))
                                } else if len(rightExpr[k]) >= 5 && rightExpr[k][:5] == "deref" {
                                        n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", currSymTab.varSymTab[GetRealName(v)][0], currSymTab.varSymTab[GetRealName(rightExpr[k][6:])][3]))
                                } else if len(v) >= 5 && v[:5] == "deref" {
                                        n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", currSymTab.varSymTab[GetRealName(v[6:])][3], rightExpr[k]))
                                } else {
                                        n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", v, rightExpr[k]))
                                        _, ok := symTab[v]
                                        if ok {
                                                if symTab[v][1] == "array" {
                                                        arrayInfo := utils.SplitAndSanitize(symTab[v][0], ",")
                                                        // arrayInfo[0]: array name
                                                        // arrayInfo[1]: array index
                                                        n.Code = append(n.Code, fmt.Sprintf("into, %s, %s, %s, %s", arrayInfo[0], arrayInfo[0], arrayInfo[1], v))
                                                }
                                        }
                                }
                        }
                        return n, nil
                } () >>
           | IdentifierList "=" ExpressionList
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        // TODO: Structs do not support multiple short declarations in a
                        // single statement for now.
                        exprName := $2.(ast.Node).Place
                        if len(exprName) >= 6 && exprName[:6] == "struct" {
                                return nil, errors.New("Use shortAssign for declaring structs")
                        } else {
                                n.Code = $2.(ast.Node).Code
                                expr := utils.SplitAndSanitize($2.(ast.Node).Place, ",")
                                if len(expr) != len($0.(ast.Node).Code) {
                                        return nil, errors.New("Number of values in LHS and RHS is not equal")
                                }
                                for k, v := range $0.(ast.Node).Code {
                                        symTabEntry, found := SearchInScope(v)
                                        if found {
                                                renamedVar := symTabEntry[0]
                                                if len(expr[k]) >= 5 && expr[k][:5] == "array" {
                                                        return nil, errors.New("Use shortAssign for declaring arrays")
                                                } else if len(currSymTab.varSymTab[v]) >= 2 && currSymTab.varSymTab[v][1] != "pointer" {
                                                        n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", renamedVar, expr[k]))
                                                }
                                        } else {
                                                return nil, errors.New("Variable not declared")
                                        }
                                }
                        }
                        return n, nil
                } () >>
           ;

ShortVarDecl : IdentifierList shortAssign ExpressionList
                << func() (Attrib, error) {
                        n := ast.Node{"", []string{}}
                        // TODO: Structs do not support multiple short declarations in a
                        // single statement for now.
                        exprName := $2.(ast.Node).Place
                        if len(exprName) >= 6 && exprName[:6] == "struct" {
                                // NOTE: The following index calculations assume that
                                // struct names cannot include a ':' character.
                                colonIndex := strings.LastIndexAny(exprName, ":")
                                structLen, err := strconv.Atoi(exprName[7:colonIndex])
                                if err != nil {
                                        return nil, err
                                }
                                // TODO: Multiple struct initializations are not handled currently.
                                structName := $0.(ast.Node).Code[0]
                                // keeping structName in the symbol table with type as Struct
                                currSymTab.varSymTab[structName] = []string{structName, "struct"}
                                // The individual struct member initializers can contain
                                // expressions whose code need to be added before the
                                // members are initialized.
                                n.Code = append(n.Code, $2.(ast.Node).Code[2*structLen:]...)
                                // Add code for struct member initializations.
                                var varName, varVal string
                                for k, v := range $2.(ast.Node).Code[:2*structLen] {
                                        if k % 2 == 0 {
                                                // Member names are located at even locations.
                                                varName = v
                                        } else {
                                                // (Initialized) member values are located at odd locations.
                                                varVal = v
                                                renamedVar := RenameVariable(fmt.Sprintf("%s.%s", structName, varName))
                                                currSymTab.varSymTab[fmt.Sprintf("%s.%s", structName, varName)] = []string{renamedVar, "int"}
                                                // TODO: Add the struct initializations to symbol table. Also,
                                                // handle member accesses as -
                                                //      node := ast.Node{1}
                                                //      b := node.val  // member access
                                                n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", renamedVar, varVal))
                                        }
                                }
                        } else {
                                n.Code = $2.(ast.Node).Code
                                placeVals := strings.Split($2.(ast.Node).Place, ",")
                                expr := utils.SplitAndSanitize($2.(ast.Node).Place, ",")
                                if len(expr) != len($0.(ast.Node).Code) {
                                        return nil, errors.New("Number of values in LHS and RHS is not equal")
                                }
                                for k, v := range $0.(ast.Node).Code {
                                        renamedVar := RenameVariable(v)
                                        _, ok := currSymTab.varSymTab[v]
                                        if !ok {
                                                // TODO: All types are int currently.
                                                if len(expr[k]) >= 7 && expr[k][0:7] == "pointer" {
                                                    currSymTab.varSymTab[v] = []string{renamedVar, "pointer", "int", expr[k][8:]}
                                                } else if len(currSymTab.varSymTab[GetRealName(expr[k])]) >= 2 && currSymTab.varSymTab[GetRealName(expr[k])][1] == "pointer" {
                                                    currSymTab.varSymTab[v] = []string{renamedVar, "pointer", currSymTab.varSymTab[GetRealName(expr[k])][2] , currSymTab.varSymTab[GetRealName(expr[k])][3]}
                                                } else if len(expr[k]) >= 5 && expr[k][0:5] == "deref" {
                                                    currSymTab.varSymTab[v] = []string{renamedVar, "int"}
                                                } else {
                                                    currSymTab.varSymTab[v] = []string{renamedVar, "int"}
                                                }
                                        } else {
                                                return nil, errors.New(fmt.Sprintf("%s already declared", v))
                                        }
                                        if len(expr[k]) >= 5 && expr[k][:5] == "array" {
                                                // TODO: rename arrays
                                                n.Code = append(n.Code, fmt.Sprintf("decl, %s, %s", renamedVar, expr[k][6:]))
                                        } else if len(expr[k]) >= 5 && expr[k][0:5] == "deref" {
                                                n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", renamedVar, currSymTab.varSymTab[GetRealName(expr[k][6:])][3]))
                                        } else if len(placeVals[k]) >= 7 && placeVals[k][:6] == "string" {
                                                // Check if the RHS is string.
                                                n.Code = append(n.Code, fmt.Sprintf("declStr, %s, %s", renamedVar, expr[k][7:]))
                                        } else if len(currSymTab.varSymTab[v]) >= 2 && currSymTab.varSymTab[v][1] != "pointer" {
                                                n.Code = append(n.Code, fmt.Sprintf("=, %s, %s", renamedVar, expr[k]))
                                        }
                                }
                        }
                        return n, nil
                } () >>
             ;

Label : identifier
                 << func() (Attrib, error) {
                       return ast.Node{string($0.(*token.Token).Lit), []string{}}, nil
                 } () >>
              ;
